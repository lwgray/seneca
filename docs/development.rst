Development Guide
=================

This guide covers setting up a development environment for contributing to Seneca.

Development Setup
-----------------

Prerequisites
~~~~~~~~~~~~~

* Python 3.8 or higher
* Git
* Node.js 14+ (for frontend development)
* Virtual environment tool (venv, conda, etc.)

Clone the Repository
~~~~~~~~~~~~~~~~~~~~

.. code-block:: bash

    git clone https://github.com/marcus-ai/seneca.git
    cd seneca

Set Up Python Environment
~~~~~~~~~~~~~~~~~~~~~~~~~

Create and activate a virtual environment:

.. code-block:: bash

    python -m venv venv
    source venv/bin/activate  # On Windows: venv\Scripts\activate

Install development dependencies:

.. code-block:: bash

    pip install -e ".[dev]"

This installs Seneca in editable mode with all development dependencies.

Pre-commit Hooks
~~~~~~~~~~~~~~~~

Install pre-commit hooks for code quality:

.. code-block:: bash

    pre-commit install

This ensures code is formatted and linted before commits.

Running Tests
-------------

Unit Tests
~~~~~~~~~~

Run all unit tests:

.. code-block:: bash

    pytest tests/unit/

Run with coverage:

.. code-block:: bash

    pytest tests/unit/ --cov=src --cov-report=html

Run specific test:

.. code-block:: bash

    pytest tests/unit/test_conversation_processor.py::TestConversationProcessor::test_get_recent_conversations

Integration Tests
~~~~~~~~~~~~~~~~~

Run integration tests (requires Marcus):

.. code-block:: bash

    pytest tests/integration/

Performance Tests
~~~~~~~~~~~~~~~~~

Run performance benchmarks:

.. code-block:: bash

    pytest tests/performance/ --benchmark-only

Code Style
----------

Python Style Guide
~~~~~~~~~~~~~~~~~~

We follow PEP 8 with these additions:

* Maximum line length: 88 characters (Black default)
* Use type hints for all public functions
* Docstrings in NumPy style

Example:

.. code-block:: python

    def process_conversation(
        self,
        conversation: Dict[str, Any],
        filters: Optional[ConversationFilter] = None
    ) -> ProcessedConversation:
        """
        Process a single conversation record.
        
        Parameters
        ----------
        conversation : Dict[str, Any]
            Raw conversation data from log file
        filters : Optional[ConversationFilter], default=None
            Filters to apply during processing
            
        Returns
        -------
        ProcessedConversation
            Processed and validated conversation object
            
        Raises
        ------
        ValueError
            If conversation data is invalid
        """
        # Implementation here

Linting and Formatting
~~~~~~~~~~~~~~~~~~~~~~

Format code with Black:

.. code-block:: bash

    black src/ tests/

Check with flake8:

.. code-block:: bash

    flake8 src/ tests/

Type check with mypy:

.. code-block:: bash

    mypy src/

Documentation
-------------

Writing Documentation
~~~~~~~~~~~~~~~~~~~~~

Documentation uses Sphinx with NumPy style docstrings.

Build documentation locally:

.. code-block:: bash

    cd docs
    make html

View at ``docs/_build/html/index.html``.

Docstring Example
~~~~~~~~~~~~~~~~~

.. code-block:: python

    class ConversationProcessor:
        """
        Process conversation data from Marcus log files.
        
        This class provides methods for reading, parsing, and analyzing
        conversation logs generated by the Marcus AI system.
        
        Parameters
        ----------
        log_dir : Union[str, Path]
            Directory containing Marcus log files
            
        Attributes
        ----------
        log_dir : Path
            Path to log directory
        cache : Dict[str, Any]
            Internal cache for performance
            
        Examples
        --------
        >>> processor = ConversationProcessor("/path/to/logs")
        >>> recent = processor.get_recent_conversations(limit=10)
        >>> print(f"Found {len(recent)} conversations")
        Found 10 conversations
        """

API Documentation
~~~~~~~~~~~~~~~~~

Document new API endpoints:

.. code-block:: python

    @app.get("/api/conversations/stats")
    async def get_conversation_stats(hours: int = 24):
        """
        Get conversation statistics.
        
        Returns statistical summary of conversations over the specified
        time period.
        
        Parameters
        ----------
        hours : int, default=24
            Number of hours to analyze
            
        Returns
        -------
        Dict[str, Any]
            Statistical summary including:
            - total_count: Total number of conversations
            - by_type: Count by conversation type
            - by_agent: Count by agent
            - hourly_distribution: Messages per hour
        """

Frontend Development
--------------------

Frontend Setup
~~~~~~~~~~~~~~

Install frontend dependencies:

.. code-block:: bash

    cd frontend
    npm install

Start development server:

.. code-block:: bash

    npm run dev

Build for production:

.. code-block:: bash

    npm run build

Component Guidelines
~~~~~~~~~~~~~~~~~~~~

* Use TypeScript for type safety
* Follow React best practices
* Use CSS modules for styling
* Write tests for components

Making Changes
--------------

Workflow
~~~~~~~~

1. Create a feature branch:

   .. code-block:: bash

       git checkout -b feature/your-feature-name

2. Make your changes
3. Add tests for new functionality
4. Update documentation
5. Run tests and linting
6. Commit with descriptive message:

   .. code-block:: bash

       git commit -m "feat: add real-time filtering to dashboard"

7. Push and create pull request

Commit Messages
~~~~~~~~~~~~~~~

Follow conventional commits:

* ``feat:`` New feature
* ``fix:`` Bug fix
* ``docs:`` Documentation changes
* ``style:`` Code style changes
* ``refactor:`` Code refactoring
* ``test:`` Test additions/changes
* ``chore:`` Maintenance tasks

Testing Guidelines
------------------

Test Structure
~~~~~~~~~~~~~~

* Unit tests in ``tests/unit/``
* Integration tests in ``tests/integration/``
* Test files named ``test_*.py``
* Test classes named ``Test*``
* Test methods named ``test_*``

Writing Good Tests
~~~~~~~~~~~~~~~~~~

1. **Arrange-Act-Assert pattern**
2. **One assertion per test**
3. **Descriptive test names**
4. **Use fixtures for setup**
5. **Mock external dependencies**

Example:

.. code-block:: python

    class TestConversationProcessor:
        @pytest.fixture
        def processor(self, tmp_path):
            """Create processor with test data."""
            # Create test log files
            log_file = tmp_path / "test.jsonl"
            log_file.write_text('{"timestamp": "2024-01-15T10:00:00Z"}\n')
            return ConversationProcessor(tmp_path)
            
        def test_get_recent_conversations_returns_list(self, processor):
            """Test that get_recent_conversations returns a list."""
            # Act
            result = processor.get_recent_conversations()
            
            # Assert
            assert isinstance(result, list)

Release Process
---------------

Version Numbering
~~~~~~~~~~~~~~~~~

We use semantic versioning (MAJOR.MINOR.PATCH):

* MAJOR: Breaking API changes
* MINOR: New features, backward compatible
* PATCH: Bug fixes

Release Checklist
~~~~~~~~~~~~~~~~~

1. Update version in ``setup.py``
2. Update ``CHANGELOG.md``
3. Run full test suite
4. Build documentation
5. Create git tag
6. Build and upload to PyPI
7. Create GitHub release

Contributing
------------

We welcome contributions! Please:

1. Check existing issues/PRs
2. Open an issue for discussion
3. Fork and create feature branch
4. Make changes with tests
5. Submit pull request

Code of Conduct
~~~~~~~~~~~~~~~

Be respectful, inclusive, and professional. See ``CODE_OF_CONDUCT.md`` for details.

Getting Help
~~~~~~~~~~~~

* GitHub Issues: Bug reports and feature requests
* Discussions: General questions and ideas
* Discord: Real-time chat with maintainers